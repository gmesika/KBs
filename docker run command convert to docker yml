package docker_run_2_compose_yml;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Convert {

	private static String ymlfile = null;
	private static String runfile = null;
	private static String[] dockerArgs = null;
	private static boolean tty = false;
	private static boolean privileged = false;
	private static List<String> ports = null;
	private static List<String> volumes = null;
	private static List<String> envFiles = null;
	private static List<String> envVars = null;
	private static List<String> exposedPorts = null;
	private static List<String> depends_on = null;
	private static String name = null;
	private static String user = null;
	private static String imageName = null;
	private static String runArgs = null;
	private static String workdir = null;
	private static String network = null;
	private static String restart = null;
	private static boolean deamon = false;
	private static String hostname = null;
	private static String entrypoint = null;
	
	private static StringBuffer yml_file = null;
	private static StringBuffer docker_run = null;

	private static boolean createYML = false;
	
	private static boolean check_constraint_of_arg_by_position(int pos, String arg)
	{
		switch (pos)
		{
		case 0:
			return arg.equalsIgnoreCase("docker");
		case 1:
			switch(arg)
			{
			case "run":
				createYML = true;
				return true;
			case "exec":
				createYML = false;
				return true;				
			default:
				return false;
			}			
		default:
			return true;
		}

	}

	private static boolean matchesPossibleImageName(String possibleImageName)
	{
		Pattern p4 = Pattern.compile(".*");
		Matcher m4 = p4.matcher(possibleImageName);
		boolean b4 = m4.matches();
		return b4;
	}
	
	private static boolean assign_object(String objName) throws Exception
	{
		System.out.println(objName);
		switch (objName.toLowerCase())
		{
		case "docker":
			return false ;
		case "run":
			return false;
		case "-d":
			deamon = true;
			return false ;
		case "--tty":
			tty = true;
			return false;
		case "--privileged":
			privileged = true;
			return false;			
		case "-p":
		case "--publish":
			ports = (ports == null) ? new ArrayList<String>() : ports;
			return true ;
		case "--depends_on":
			depends_on = (depends_on == null) ? new ArrayList<String>() : depends_on;
			return true;
		case "-v":
		case "--volume":
			volumes = (volumes == null) ? new ArrayList<String>() : volumes;
			return true;		
		case "--env-file":
			envFiles = (envFiles == null) ? new ArrayList<String>() : envFiles;
			return true;	
		case "-e" :
		case "--env":
			envVars = (envVars == null) ? new ArrayList<String>() : envVars;
			return true ;
		case "-u" :
		case "--user":
			user = "";
			return true ;
		case "--restart":
			restart = "";
			return true;
		case "--expose":
			exposedPorts = (exposedPorts == null) ? new ArrayList<String>() : exposedPorts;
			return true;	
		case "--name":
			name = "";
			return true;	
		case "--workdir":
			workdir = "";
			return true;
		case "--network":
			network = "";
			return true;	
		case "--hostname":
			hostname = "";
			return true;	
		case "--entrypoint":
			entrypoint = "";
			return true;
		default:
			System.out.println("handling default");
			if (! objName.startsWith("-") && imageName == null && matchesPossibleImageName(objName))
			{
				imageName = objName;
				return false;
			}
			else
			{
				if (imageName != null)
				{
					if (runArgs == null) 
						runArgs = objName;
					else
						runArgs = runArgs.concat(" ").concat(objName);
					return false;					
				}
				else
				{
					throw new Exception("wrong docker run syntax command!");
				}
			}	
		}

	}

	private static boolean assign_value(String obj, String val)
	{
		switch (obj)
		{
		case "docker":
			return true;
		case "run":
			return true;
		case "-d":
			deamon = true;
			return true;
		case "--tty":
			tty = true;
			return true;
		case "--workdir":
			workdir = val;
			return true;
		case "--privileged":
			privileged = true;
			return true;			
		case "--depends_on":
			Pattern p7 = Pattern.compile(".*");
			Matcher m7 = p7.matcher(val);
			boolean b7 = m7.matches();
			if (b7)
				depends_on.add(val);
			return b7;
		case "-p":
		case "--publish":
			Pattern p = Pattern.compile("^[0-9].*:[0-9].*$");
			Matcher m = p.matcher(val);
			boolean b = m.matches();
			if (b)
				ports.add(val);
			return b;
		case "-v":
		case "--volume":
			Pattern p1 = Pattern.compile(".*:.*");
			Matcher m1 = p1.matcher(val);
			boolean b1 = m1.matches();
			if (b1)
				volumes.add(val);
			return b1 ;	
		case "--env-file":
			Pattern p6 = Pattern.compile(".*");
			Matcher m6 = p6.matcher(val);
			boolean b6 = m6.matches();
			if (b6)
				envFiles.add(val);
			return b6;
		case "-e":
		case "--env":
			Pattern p2 = Pattern.compile(".*=.*");
			Matcher m2 = p2.matcher(val);
			boolean b2 = m2.matches();
			if (b2)
				envVars.add(val);
			return b2;	
		case "--expose":
			Pattern p3 = Pattern.compile("^[0-9]*");
			Matcher m3 = p3.matcher(val);
			boolean b3 = m3.matches();
			if (b3)
				exposedPorts.add(val);
			return b3;	
		case "--name":
			Pattern p4 = Pattern.compile("[\\w][\\w.-]{0,127}");
			Matcher m4 = p4.matcher(val);
			boolean b4 = m4.matches();
			if (b4)
				name = val;
			return b4;		
		case "--network":
			Pattern p8 = Pattern.compile("host|bridge");
			Matcher m8 = p8.matcher(val);
			boolean b8 = m8.matches();
			if (b8)
				network = val;
			return b8;
		case "--restart":
			Pattern p9 = Pattern.compile("no|always|unless-stopped|on-failure|on-failure:[0-9.*]");
			Matcher m9 = p9.matcher(val);
			boolean b9 = m9.matches();
			if (b9)
				restart = val;
			return b9;
		case "-u" :
		case "--user":
			Pattern p5 = Pattern.compile(".*");
			Matcher m5 = p5.matcher(val);
			boolean b5 = m5.matches();
			if (b5)
				user = val;
			return b5;
		case "-h":
		case "--hostname":
			Pattern p10 = Pattern.compile(".*");
			Matcher m10 = p10.matcher(val);
			boolean b10 = m10.matches();
			if (b10)
				hostname = val;
			return b10;
		case "--entrypoint":
			Pattern p11 = Pattern.compile(".*");
			Matcher m11 = p11.matcher(val);
			boolean b11 = m11.matches();
			if (b11)
				entrypoint = val;
			return b11;
		default:
			if (runArgs != null)
			{
				runArgs.concat(" ").concat(val);
				return true;
			}
			else
				return false;
		}

	}

	private static String organizeDockerRun(String[] args)
	{

		boolean newWord = true;
		String word = null;
		boolean switchIndicator = true;

		String sentence = "";
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 0; i < args.length; i++) {
			stringBuilder.append(args[i] + " ");
		}
		String argsString = stringBuilder.toString();
		for (int counter = 0 ; counter < argsString.toCharArray().length; counter++)
		{
			char singleChar  = argsString.charAt(counter);
			switch (singleChar)
			{
			case ' ':					
				if (! newWord && word != null && word.length() > 0)
				{
					sentence = sentence + word + ' ';
				}
				newWord = true;
				switchIndicator = false;
				break;
			case '-':
				if (newWord || word == null || word.length() == 0)
				{						
					newWord = false;
					word = "";
					switchIndicator = true;
				}
				word = word + String.valueOf(singleChar);
				break;
			case '=':
				if (switchIndicator)
				{
					if (! newWord && word != null && word.length() > 0)
					{
						sentence = sentence + word + ' ';
					}
					newWord = true;						
				}
				else
				{
					word = word + String.valueOf(singleChar);
				}
				switchIndicator = false;
				break;
			default:

				if (newWord || word == null || word.length() == 0)
				{
					newWord = false;
					word = "";						
				}	
				word = word + singleChar;
			}

		}
		return sentence;
	}

	private static void extractDockerObjects(String sentence) throws Exception
	{
		boolean objectAssigned = false;
		boolean valueAssigned = false;
		String object = null;
		boolean completed = false;

		String[] sentence_args = sentence.split(" ");
		for (int counter = 0 ; counter < sentence_args.length; counter++)
		{
			System.out.println("pos/arg: " + counter + " / " + sentence_args[counter] );
			String docker_val = sentence_args[counter];
			if (! check_constraint_of_arg_by_position(counter, docker_val)) {				
				throw new Exception ("wrong docker run syntax command!");
			}

			if (objectAssigned)
			{					
				valueAssigned = assign_value(object, docker_val );
				if (! valueAssigned)
					throw new Exception ("wrong docker run syntax command!");
				objectAssigned = false;
			}
			else
			{
				if (! objectAssigned)
				{
					objectAssigned = assign_object(docker_val);				
					object = docker_val;
				}			
			}

			if (counter + 1 == sentence_args.length && imageName != null)
			{
				completed = true;
			}
		}

		if (! completed)
			throw new Exception("wrong docker run syntax command!");
	}

	private static void writeRUNnYML(String objName)
	{
		switch (objName)
		{
		case "version":			
			yml_file.append("version: '3.2'\r");		
			break;
		case "services":
			yml_file.append("services:\r");
			break;
		case "deamon":
			if (deamon)
			{
				docker_run.append(" ");docker_run.append("-d");
			}
			break;
		case "service_name":
			//docker_run.append(" ");docker_run.append("--hostname");docker_run.append(" ");docker_run.append(name);docker_run.append(" ");
			yml_file.append(" ");yml_file.append(name);yml_file.append(":");yml_file.append("\r\n");
			break;
		case "container_name":
			docker_run.append(" ");docker_run.append("--name");docker_run.append(" ");docker_run.append(name);docker_run.append(" ");
			yml_file.append(" ");yml_file.append(" ");yml_file.append("container_name:");yml_file.append(" ");yml_file.append(name);yml_file.append("\r\n");
			break;
		case "image_name":
			docker_run.append(" ");docker_run.append(imageName);docker_run.append(" ");
			yml_file.append(" ");yml_file.append(" ");yml_file.append("image:");yml_file.append(" ");yml_file.append(imageName);yml_file.append("\r\n");
			break;
		case "env-file":
			if (envFiles == null) break;
			yml_file.append(" ");yml_file.append(" ");yml_file.append("env_file:");yml_file.append("\r\n");
			for (String envFile : envFiles)
			{
				docker_run.append(" ");docker_run.append("--env-file");docker_run.append(" ");docker_run.append(envFile);docker_run.append(" ");
				yml_file.append(" ");yml_file.append(" ");yml_file.append(" ");yml_file.append("-");yml_file.append(" ");yml_file.append(envFile);yml_file.append("\r\n");					
			}
			break;
		case "env":
			if (envVars == null) break;
			yml_file.append(" ");yml_file.append(" ");yml_file.append("environment:");yml_file.append("\r\n");
			for (String envVar : envVars)
			{
				docker_run.append(" ");docker_run.append("-e");docker_run.append(" ");docker_run.append(envVar);docker_run.append(" ");
				yml_file.append(" ");yml_file.append(" ");yml_file.append(" ");yml_file.append("-");yml_file.append(" ");yml_file.append(envVar);yml_file.append("\r\n");					
			}
			break;
		case "volumes":
			if (volumes == null) break;
			yml_file.append(" ");yml_file.append(" ");yml_file.append("volumes:");yml_file.append("\r\n");
			for (String volume : volumes)
			{
				docker_run.append(" ");docker_run.append("-v");docker_run.append(" ");docker_run.append(volume);docker_run.append(" ");
				yml_file.append(" ");yml_file.append(" ");yml_file.append(" ");yml_file.append("-");yml_file.append(" ");yml_file.append(volume);yml_file.append("\r\n");					
			}
			break;
		case "ports":
			if (ports == null) break;
			yml_file.append(" ");yml_file.append(" ");yml_file.append("ports:");yml_file.append("\r\n");
			for (String port : ports)
			{
				docker_run.append(" ");docker_run.append("-p");docker_run.append(" ");docker_run.append(port);docker_run.append(" ");
				yml_file.append(" ");yml_file.append(" ");yml_file.append(" ");yml_file.append("-");yml_file.append(" ");yml_file.append(port);yml_file.append("\r\n");					
			}
			break;
		case "depends_on":
			if (depends_on == null) break;
			yml_file.append(" ");yml_file.append(" ");yml_file.append("depends_on:");yml_file.append("\r\n");
			for (String depend_on : depends_on)
			{
				yml_file.append(" ");yml_file.append(" ");yml_file.append(" ");yml_file.append("-");yml_file.append(" ");yml_file.append(depend_on);yml_file.append("\r\n");					
			}
			break;	
		case "expose":
			if (exposedPorts == null ) break;
			yml_file.append(" ");yml_file.append(" ");yml_file.append("expose:");yml_file.append("\r\n");
			for (String exposedPort : exposedPorts)
			{
				docker_run.append(" ");docker_run.append("--expose");docker_run.append(" ");docker_run.append(exposedPort);docker_run.append(" ");
				yml_file.append(" ");yml_file.append(" ");yml_file.append(" ");yml_file.append("-");yml_file.append(" ");yml_file.append(exposedPort);yml_file.append("\r\n");					
			}
			break;
		case "user":
			if (user != null)
			{
				docker_run.append(" ");docker_run.append("-u");docker_run.append(" ");docker_run.append(user);docker_run.append(" ");
				yml_file.append(" ");yml_file.append(" ");yml_file.append("user:");yml_file.append(user);yml_file.append("\r\n");
			}
			break;
		case "tty":
			if (tty)
			{
				docker_run.append(" ");docker_run.append("--tty");docker_run.append(" ");
				yml_file.append(" ");yml_file.append(" ");yml_file.append("tty:");yml_file.append(" ");yml_file.append(tty);yml_file.append("\r\n");
			}
			break;
		case "privileged":
			if (privileged)
			{
				docker_run.append(" ");docker_run.append("--privileged");
				yml_file.append(" ");yml_file.append(" ");yml_file.append("privileged:");yml_file.append(" ");yml_file.append(privileged);yml_file.append("\r\n");
			}
			break;	
		case "network":
			if (network != null)
			{
				docker_run.append(" ");docker_run.append("--network");docker_run.append(" ");docker_run.append(network);docker_run.append(" ");
				yml_file.append(" ");yml_file.append(" ");yml_file.append("network_mode:");yml_file.append(" \"");yml_file.append(network);yml_file.append("\"\r\n");
			}
			break;
		case "restart":
			if (restart != null)
			{
				docker_run.append(" ");docker_run.append("--restart");docker_run.append(" ");docker_run.append(restart);docker_run.append(" ");
				yml_file.append(" ");yml_file.append(" ");yml_file.append("restart:");yml_file.append(" ");yml_file.append(restart);yml_file.append("\r\n");
			}
		case "workdir":
			if (workdir != null)
			{
				docker_run.append(" ");docker_run.append("--workdir");docker_run.append(" ");docker_run.append(workdir);docker_run.append(" ");
				yml_file.append(" ");yml_file.append(" ");yml_file.append("working_dir:");yml_file.append(" ");yml_file.append(workdir);yml_file.append("\r\n");
			}
			break;
		case "runArgs":
			if (runArgs != null)
			{				
				docker_run.append(" ");docker_run.append(runArgs);
				yml_file.append(" ");yml_file.append(" ");yml_file.append("command:");yml_file.append(" ");yml_file.append("'");yml_file.append(runArgs);yml_file.append("'");yml_file.append("\r\n");
			}
			break;
		case "hostname":
			if (hostname != null)
			{
				docker_run.append(" ");docker_run.append("--hostname");docker_run.append(" ");docker_run.append(hostname);docker_run.append(" ");
				yml_file.append(" ");yml_file.append(" ");yml_file.append("hostname:");yml_file.append(hostname);yml_file.append("\r\n");
			}
			break;
		}
	}

	private static void createRUNnYML()
	{		
		yml_file  = new StringBuffer();
		docker_run = new StringBuffer();		
		try
		{
			//writeRUNnYML("version");
			//writeRUNnYML("services");
			writeRUNnYML("service_name");
			writeRUNnYML("container_name");
			writeRUNnYML("deamon");
			writeRUNnYML("env-file");
			writeRUNnYML("env");
			writeRUNnYML("volumes");
			writeRUNnYML("ports");
			writeRUNnYML("expose");
			writeRUNnYML("user");
			writeRUNnYML("tty");
			writeRUNnYML("privileged");
			writeRUNnYML("restart");
			writeRUNnYML("network");
			writeRUNnYML("workdir");
			writeRUNnYML("depends_on");
			writeRUNnYML("hostname");			
		}
		finally
		{
			// for docker run command capability, the following have to end the list
			writeRUNnYML("image_name");
			writeRUNnYML("runArgs");
		}
						
	}

	private static void writeYML() throws IOException
	{		
		if (! createYML) return;
		
		System.out.println(yml_file.toString());		
		FileWriter fw = new FileWriter(ymlfile);
		fw.write(yml_file.toString());
		fw.close();	// TODO add try-with-Resources catch exception
	}

	private static void writeDockerRun() throws IOException
	{		
		System.out.println(docker_run.toString());		
		FileWriter fw = new FileWriter(runfile);
		fw.write("docker run " + docker_run.toString() + "\n");
		fw.close();	// TODO add try-with-Resources catch exception
	}
	
	private static void parseArgs(String[] args) throws IOException
	{
		for (int counter = 0; counter < args.length; counter++)
		{
			//--cmdline=docker_args.txt --ymlfile=docker_compose_output.yml --runfile=docker_run_output.txt
			if (args[counter].startsWith("--"))
			{
				String switchStr = (String)args[counter];
				String switchName = switchStr.split("--")[1].split("=")[0];//need to check that = exists
				String switchValue = switchStr.split("--")[1].split("=")[1];//need to check that = exists
				
				switch (switchName)
				{
				case "cmdline":
					String fileName = switchValue;
					
					BufferedReader reader = new BufferedReader(new FileReader(fileName));
				    String currentLine = reader.readLine();
				    reader.close();					
					dockerArgs = currentLine.split(" ");
					break;
				case "ymlfile":
					ymlfile = switchValue;
					break;
				case "runfile":
					runfile = switchValue;
					break;
				default:
					System.out.println("unknown switch val");
					System.exit(1);		
				}
			}
			else
			{
				System.out.println("switch has to start with --");
				System.exit(1);
			}
				
		}
	}
	
	public static void main(String[] args) throws Exception 
	{
		System.out.println("version 0.9");
		parseArgs(args);
		String sentence = organizeDockerRun(dockerArgs);
		extractDockerObjects(sentence);
		createRUNnYML();		
		writeYML();
		writeDockerRun();
	}



}
