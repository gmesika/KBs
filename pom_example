<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.gsi.apu</groupId>
		<artifactId>float32</artifactId>
		<version>Dev-1000-SNAPSHOT</version>
	</parent>

	<groupId>com.gsi.apu.float32</groupId>
	<artifactId>float32-api</artifactId>
	<version>Dev-1000-SNAPSHOT</version>
	<packaging>pom</packaging>

	<dependencies>
		<dependency>
			<groupId>com.gsi.apu.smart-api</groupId>
			<artifactId>python-neural-hash-image</artifactId>
			<version>Dev-1000-SNAPSHOT</version>
			<type>pom</type>
		</dependency>
	</dependencies>

	<properties>
		<build.number>0</build.number>
		<artifact.version>${major.version}.${release.version}.${build.number}</artifact.version>
		<version.file.name>version.json</version.file.name>
		<artifact.template.url>http://london:5555/nexus/service/local/artifact/maven/redirect?r=snapshots&amp;g=com.gsi.apu.float32&amp;a=float32-catalog-template&amp;v=${project.version}&amp;p=catalog-template.json</artifact.template.url>

		<host.port>7761</host.port>
		<container.port>7761</container.port>

		<host.efs>/efs</host.efs>
		<container.efs>/efs</container.efs>
        <container.workspace>/home/public/data/</container.workspace>
		<host.workspace>/home/public/data/</host.workspace>

		<docker.base.image.repository.to.pull>${docker.registry.url}</docker.base.image.repository.to.pull>
        <docker.base.image.name>com/gsi/apu/smart-api/python-neural-hash-image</docker.base.image.name>
		<docker.base.image.tag />
		<docker.base.repo.tag.name>${docker.base.image.repository.to.pull}${docker.base.image.name}${docker.base.image.tag}</docker.base.repo.tag.name>

		<docker.image.name.repository.to.pull>${docker.registry.url}</docker.image.name.repository.to.pull>
		<docker.python.float32.neural.image.name>com/gsi/apu/apis/float32-api</docker.python.float32.neural.image.name>
		<docker.repo.name>${docker.python.float32.neural.image.name}</docker.repo.name>
		<docker.image.tag>${artifact.version}</docker.image.tag>
		<docker.repo.tag.name>${docker.repo.name}:${docker.image.tag}</docker.repo.tag.name>
		<docker.exec.name>docker</docker.exec.name>

		<server.exec.file.name>server</server.exec.file.name>
		<container.name>gsi-float32-server${dev.tag}</container.name>
		<python.server.file.name>server.py</python.server.file.name>

		<deb.build.container.name>float32-deb-build</deb.build.container.name>

	</properties>

	<build>
		<resources>
			<resource>
				<directory>${src}</directory>
				<includes>
					<include>**/*</include>
				</includes>
			</resource>
		</resources>
	</build>
	<profiles>
		<profile>
			<id>clean</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-clean-plugin</artifactId>
						<version>2.5</version>
						<executions>
							<execution>
								<id>default-clean</id>
								<phase>clean</phase>
								<goals>
									<goal>clean</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>resources</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>3.1.0</version>
						<executions>
							<execution>
								<id>default-resources</id>
								<phase>process-sources</phase>
								<goals>
									<goal>resources</goal>
								</goals>
							</execution>
							<execution>
								<id>default-testResources</id>
								<phase>process-test-resources</phase>
								<goals>
									<goal>testResources</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>install</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-install-plugin</artifactId>
						<version>2.4</version>
						<executions>
							<execution>
								<id>default-install</id>
								<phase>install</phase>
								<goals>
									<goal>install</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>login-to-registry</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
								<id>login to registry</id>
								<phase>initialize</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${env.HOME}/login_to_registry.sh</executable>
									<arguments>
										<argument>${docker.registry.url}</argument>
										<argument>${docker.registry.type}</argument>
										<argument>${docker.registry.user}</argument>
										<argument>${docker.registry.password}</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>deploy</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-deploy-plugin</artifactId>
						<version>2.7</version>
						<executions>
							<execution>
								<id>default-deploy</id>
								<phase>deploy</phase>
								<goals>
									<goal>deploy</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>pylint</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
								<id>docker pylint: ${main.python}</id>
								<phase>compile</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${docker.exec.name}</executable>
									<arguments>
										<argument>run</argument>
										<argument>--rm</argument>
										<argument>--workdir=${python.source.image.path}</argument>
										<argument>-u=${user.id}</argument>
										<argument>--entrypoint=${python.scripts.image.path}/generate_pylint_report.sh</argument>
										<argument>-v</argument>
										<argument>${main.python}:${python.source.image.path}</argument>
										<argument>${docker.base.repo.tag.name}</argument>
										<argument>--ignoreErrors</argument>
										<argument>${ignore.pylint.errors}</argument>
										<argument>--reportDir</argument>
										<argument>${python.source.image.path}</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>pyinstaller</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
								<id>pyinstaller : ${main.python}</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${docker.exec.name}</executable>
									<arguments>
										<argument>run</argument>
										<argument>--rm</argument>
										<argument>--workdir=${python.source.image.path}</argument>
										<argument>-u=${user.id}</argument>
										<argument>--entrypoint=/python/scripts/run_pyinstaller.sh</argument>
										<argument>-v</argument>
										<argument>${main.python}:${python.source.image.path}</argument>
										<argument>-v</argument>
										<argument>${target}:/python/client-kit</argument>
										<argument>${docker.base.repo.tag.name}</argument>
										<argument>--onefile</argument>
										<argument>--windowed</argument>
										<argument>--distpath=${python.source.image.path}/dist</argument>
										<argument>${python.server.file.name}</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>copy-server-to-bin</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>3.1.0</version>
						<executions>
							<execution>
								<id>copy server to docker bin directory</id>
								<phase>package</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${docker.file.dir.name}/bin</outputDirectory>
									<resources>
										<resource>
											<directory>${main.python}</directory>
											<includes>
												<include>**/dist/${server.exec.file.name}</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
							<execution>
								<id>copy ck zip to docker zip directory</id>
								<phase>package</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${docker.file.dir.name}/apis</outputDirectory>
									<resources>
										<resource>
											<directory>${project.build.directory}</directory>
											<includes>
												<include>**.zip</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>attach-artifact</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<version>1.12</version>
						<executions>
							<execution>
								<id>attach-artifacts</id>
								<phase>package</phase>
								<goals>
									<goal>attach-artifact</goal>
								</goals>
								<configuration>
									<artifacts>
										<artifact>
											<file>${main.python}/dist/${server.exec.file.name}</file>
											<type>main</type>
										</artifact>
									</artifacts>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>attach-client-kit-artifact</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<executions>
							<execution>
								<id>building float32-neural zip</id>
								<phase>process-classes</phase>
								<goals>
								  <goal>single</goal>
								</goals>
								<configuration>
									<finalName>float32-api-client-kit</finalName>
									<appendAssemblyId>false</appendAssemblyId>
									<descriptors>
										<descriptor>zip.xml</descriptor>
									</descriptors>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>create-version-file</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
								<id>chmod create version script</id>
								<phase>compile</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>chmod</executable>
									<arguments>
										<argument>+x</argument>
										<argument>${main.resources}/create_version_file.sh</argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>run create version file</id>
								<phase>compile</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${main.resources}/create_version_file.sh</executable>
									<arguments>
										<argument>${target}/${version.file.name}</argument>
										<argument>${artifact.version}</argument>
										<argument>${project.version}</argument>
										<argument>${artifact.template.url}</argument>
										<argument>${release.version}</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>attach-version-artifact</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<version>1.12</version>
						<executions>
							<execution>
								<id>attach-artifacts</id>
								<phase>package</phase>
								<goals>
									<goal>attach-artifact</goal>
								</goals>
								<configuration>
									<artifacts>
										<artifact>
											<file>${target}/${version.file.name}</file>
											<type>version.json</type>
										</artifact>
									</artifacts>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>build-docker-image</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
								<id>docker build image of server</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${docker.exec.name}</executable>
									<arguments>
										<argument>build</argument>
										<argument>-t</argument>
										<argument>${docker.repo.tag.name}</argument>
										<argument>-t</argument>
										<argument>${docker.repo.name}</argument>
										<argument>--build-arg</argument>
										<argument>PARENT_REPO_TAG_NAME=${docker.base.repo.tag.name}</argument>
										<!-- <argument>-build-arg</argument>
										<argument>DOCKER_FILE_PATH=${docker.file.dir.name}</argument> -->
										<argument>${docker.file.dir.name}</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>remove-docker-image-container</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
								<id>docker container force rm chmod</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>chmod</executable>
									<arguments>
										<argument>+x</argument>
										<argument>./src/test/remove-docker-container.sh</argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>docker container force rm: ${container.name}</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>./src/test/remove-docker-container.sh</executable>
									<arguments>
										<argument>${container.name}</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>docker-run-image-2-build-deb</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
							<id>docker container force rm chmod - create deb</id>
							<phase>prepare-package</phase>
							<goals>
								<goal>exec</goal>
							</goals>
							<configuration>
								<executable>chmod</executable>
								<arguments>
									<argument>+x</argument>
									<argument>${classes.main}/resources/create_deb.sh</argument>
								</arguments>
							</configuration>
						</execution>
							<execution>
								<id>docker build deb</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>docker</executable>
										<arguments>
										<argument>run</argument>
										<argument>--rm</argument>
										<argument>--tty</argument>
										<argument>-v</argument>
										<argument>${classes.main}/resources/:/resources</argument>
										<argument>-v</argument>
										<argument>${main.python}/dist/:/server_bin/</argument>
										<argument>--network=bridge</argument>
										<argument>--workdir=/resources</argument>
										<argument>--entrypoint=/resources/create_deb.sh</argument>
										<argument>-u=${user.id}</argument>
										<argument>--name</argument>
										<argument>${deb.build.container.name}</argument>
										<argument>${docker.base.image.repository.to.pull}${docker.base.image.name}</argument>
										<argument>${artifact.version}</argument>
										<argument>${docker.registry.url}${docker.repo.tag.name}</argument>
										<argument>${docker.registry.type}</argument>
										<argument>${docker.image.name.repository.to.pull}</argument>
										<argument>${docker.registry.user}</argument>
										<argument>${docker.registry.password}</argument>
										<argument>${docker.image.tag}</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>attach-deb-artifact</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<version>1.12</version>
						<executions>
							<execution>
								<id>attach-artifact of server deb</id>
								<phase>package</phase>
								<goals>
									<goal>attach-artifact</goal>
								</goals>
								<configuration>
									<artifacts>
										<artifact>
											<file>${classes.main}/resources/gsi-float32-api-${artifact.version}.deb</file>
											<type>deb</type>
										</artifact>
									</artifacts>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>deploy-to-registry</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
								<id>tag image for latest</id>
								<phase>deploy</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${docker.exec.name}</executable>
									<arguments>
										<argument>tag</argument>
										<argument>${docker.repo.name}</argument>
										<argument>${docker.registry.url}${docker.repo.name}</argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>tag image for specific tag</id>
								<phase>deploy</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${docker.exec.name}</executable>
									<arguments>
										<argument>tag</argument>
										<argument>${docker.repo.name}</argument>
										<argument>${docker.registry.url}${docker.repo.tag.name}</argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>push image to registry with latest</id>
								<phase>deploy</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${docker.exec.name}</executable>
									<arguments>
										<argument>push</argument>
										<argument>${docker.registry.url}${docker.repo.name}</argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>push image to registry with specific tag</id>
								<phase>deploy</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${docker.exec.name}</executable>
									<arguments>
										<argument>push</argument>
										<argument>${docker.registry.url}${docker.repo.tag.name}</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>


